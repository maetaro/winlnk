using System;
using System.IO;
using System.Linq;
using System.Text.Json;
using WindowsShortcutParser.Entity;
using WindowsShortcutParser.Parser;
using Xunit;
using DriveType = WindowsShortcutParser.Entity.DriveType;

namespace WindowsShortcutParser.Test
{
    public class UnitTest1
    {
        [Fact]
        public void TestLocalDir()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources","LocalDir.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(true);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(false);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(false);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(true);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(false);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-06-25T14:32:54.8549620+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:15:59.9196426+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-06-25T14:32:54.8549620+09:00").ToFileTime());
            slh.FileSize.Is(0u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            var ltil = result.LinkTargetIDList;
            ((int)ltil.IDListSize).Is(307);
            ltil.IDList.Count.Is(4);

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(94u);
            li.LinkInfoHeaderSize.Is(28u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsTrue();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsFalse();
            li.VolumeIDOffset.Is(28u);
            li.LocalBasePathOffset.Is(52u);
            li.CommonNetworkRelativeLinkOffset.Is(0u);
            li.CommonPathSuffixOffset.Is(93u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(0u);
            li.VolumeID.VolumeIDSize.Is(24u);
            li.VolumeID.DriveType.Is(DriveType.DRIVE_FIXED);
            li.VolumeID.DriveSerialNumber.Is(2931710625u);
            li.VolumeID.VolumeLabelOffset.Is(16u);
            li.VolumeID.VolumeLabelOffsetUnicode.Is(0u);
            li.VolumeID.Data.Is("Windows");
            li.LocalBasePath.Is(@"C:\Program Files\Microsoft Visual Studio");
            li.CommonNetworkRelativeLink.IsNull();
            li.CommonPathSuffix.Is("");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.IsNull();

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@"..\..\..\Program Files\Microsoft Visual Studio");
            result.StringData.WORKING_DIR.Is(null);
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "LocalDir.json"));
        }
        [Fact]
        public void TestLocalDirUnicode()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources","LocalDirUnicode.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(true);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(false);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(false);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(true);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(false);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-09-18T11:17:49.7274659+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:19:51.3876503+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-09-18T11:17:57.1154608+09:00").ToFileTime());
            slh.FileSize.Is(0u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            var ltil = result.LinkTargetIDList;
            ((int)ltil.IDListSize).Is(199);
            ltil.IDList.Count.Is(4);

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(94u);
            li.LinkInfoHeaderSize.Is(36u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsTrue();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsFalse();
            li.VolumeIDOffset.Is(36u);
            li.LocalBasePathOffset.Is(60u);
            li.CommonNetworkRelativeLinkOffset.Is(0u);
            li.CommonPathSuffixOffset.Is(90u);
            li.LocalBasePathOffsetUnicode.Is(70u);
            li.CommonPathSuffixOffsetUnicode.Is(92u);
            li.VolumeID.VolumeIDSize.Is(24u);
            li.VolumeID.DriveType.Is(DriveType.DRIVE_FIXED);
            li.VolumeID.DriveSerialNumber.Is(2931710625u);
            li.VolumeID.VolumeLabelOffset.Is(16u);
            li.VolumeID.VolumeLabelOffsetUnicode.Is(0u);
            li.VolumeID.Data.Is("Windows");
            li.LocalBasePath.Is(@"C:\temp\?");
            li.CommonNetworkRelativeLink.IsNull();
            li.CommonPathSuffix.Is("");
            li.LocalBasePathUnicode.Is(@"C:\temp\☺");
            li.CommonPathSuffixUnicode.Is("");

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@"..\..\..\temp\☺");
            result.StringData.WORKING_DIR.Is(null);
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "LocalDirUnicode.json"));
        }
        [Fact]
        public void TestLocalFile()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources","LocalFile.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(true);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(true);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(false);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(true);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-06-25T14:36:14.9646652+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:15:16.1770715+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-06-25T14:36:14.9655184+09:00").ToFileTime());
            slh.FileSize.Is(6525u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            var ltil = result.LinkTargetIDList;
            ((int)ltil.IDListSize).Is(825);
            ltil.IDList.Count.Is(10);

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(143u);
            li.LinkInfoHeaderSize.Is(28u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsTrue();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsFalse();
            li.VolumeIDOffset.Is(28u);
            li.LocalBasePathOffset.Is(52u);
            li.CommonNetworkRelativeLinkOffset.Is(0u);
            li.CommonPathSuffixOffset.Is(142u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(0u);
            li.VolumeID.VolumeIDSize.Is(24u);
            li.VolumeID.DriveType.Is(DriveType.DRIVE_FIXED);
            li.VolumeID.DriveSerialNumber.Is(2931710625u);
            li.VolumeID.VolumeLabelOffset.Is(16u);
            li.VolumeID.VolumeLabelOffsetUnicode.Is(0u);
            li.VolumeID.Data.Is("Windows");
            li.LocalBasePath.Is("C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC#\\Snippets\\1033\\SnippetsIndex.xml");
            li.CommonNetworkRelativeLink.IsNull();
            li.CommonPathSuffix.Is("");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.IsNull();

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@"..\..\..\Program Files\Microsoft Visual Studio\2022\Preview\VC#\Snippets\1033\SnippetsIndex.xml");
            result.StringData.WORKING_DIR.Is(@"C:\Program Files\Microsoft Visual Studio\2022\Preview\VC#\Snippets\1033");
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "LocalFile.json"));
        }
        [Fact]
        public void TestLocalFileUnicode()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "LocalFileUnicode.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(true);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(true);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(false);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(true);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-09-18T11:17:21.1979489+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:19:34.9779495+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-09-18T11:19:34.9759550+09:00").ToFileTime());
            slh.FileSize.Is(1491u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            var ltil = result.LinkTargetIDList;
            ((int)ltil.IDListSize).Is(285);
            ltil.IDList.Count.Is(5);

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(112u);
            li.LinkInfoHeaderSize.Is(36u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsTrue();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsFalse();
            li.VolumeIDOffset.Is(36u);
            li.LocalBasePathOffset.Is(60u);
            li.CommonNetworkRelativeLinkOffset.Is(0u);
            li.CommonPathSuffixOffset.Is(108u);
            li.LocalBasePathOffsetUnicode.Is(76u);
            li.CommonPathSuffixOffsetUnicode.Is(110u);
            li.VolumeID.VolumeIDSize.Is(24u);
            li.VolumeID.DriveType.Is(DriveType.DRIVE_FIXED);
            li.VolumeID.DriveSerialNumber.Is(2931710625u);
            li.VolumeID.VolumeLabelOffset.Is(16u);
            li.VolumeID.VolumeLabelOffsetUnicode.Is(0u);
            li.VolumeID.Data.Is("Windows");
            li.LocalBasePath.Is(@"C:\temp\?\?.txt");
            li.CommonNetworkRelativeLink.IsNull();
            li.CommonPathSuffix.Is("");
            li.LocalBasePathUnicode.Is(@"C:\temp\☺\☺.txt");
            li.CommonPathSuffixUnicode.Is("");

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@"..\..\..\temp\☺\☺.txt");
            result.StringData.WORKING_DIR.Is(@"C:\temp\☺");
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "LocalFileUnicode.json"));
        }
        [Fact]
        public void TestRemoteDir()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "RemoteDir.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(false);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(false);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(true);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(true);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(false);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-08-28T16:34:45.5071751+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:34:23.7394792+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-08-28T16:35:18.8513364+09:00").ToFileTime());
            slh.FileSize.Is(0u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            result.LinkTargetIDList.IsNull();

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(84u);
            li.LinkInfoHeaderSize.Is(28u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsFalse();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsTrue();
            li.VolumeIDOffset.Is(0u);
            li.LocalBasePathOffset.Is(0u);
            li.CommonNetworkRelativeLinkOffset.Is(28u);
            li.CommonPathSuffixOffset.Is(71u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(0u);
            li.VolumeID.IsNull();
            li.LocalBasePath.IsNull();
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkSize.Is(43u);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidDevice.Is(false);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidNetType.Is(true);
            li.CommonNetworkRelativeLink.NetNameOffset.Is(20u);
            li.CommonNetworkRelativeLink.DeviceNameOffset.Is(0u);
            li.CommonNetworkRelativeLink.NetworkProviderType.Value.Is(131072u);
            li.CommonNetworkRelativeLink.NetNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.DeviceNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.NetName.Is(@"\\192.168.10.101\SHARE");
            li.CommonNetworkRelativeLink.DeviceName.Is("ポスター作り");
            li.CommonNetworkRelativeLink.NetNameUnicode.IsNull();
            li.CommonNetworkRelativeLink.DeviceNameUnicode.IsNull();
            li.CommonPathSuffix.Is("ポスター作り");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.IsNull();

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@".\ポスター作り");
            result.StringData.WORKING_DIR.Is(null);
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "RemoteDir.json"));
        }
        [Fact]
        public void TestRemoteDirUnicode()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "RemoteDirUnicode.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(false);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(false);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(true);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(true);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(false);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-09-18T02:17:49.7274659+00:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T02:32:01.3248914+00:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-09-18T02:32:01.1609195+00:00").ToFileTime());
            slh.FileSize.Is(0u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            result.LinkTargetIDList.IsNull();

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(100u);
            li.LinkInfoHeaderSize.Is(36u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsFalse();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsTrue();
            li.VolumeIDOffset.Is(0u);
            li.LocalBasePathOffset.Is(0u);
            li.CommonNetworkRelativeLinkOffset.Is(36u);
            li.CommonPathSuffixOffset.Is(79u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(86u);
            li.VolumeID.IsNull();
            li.LocalBasePath.IsNull();
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkSize.Is(43u);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidDevice.Is(false);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidNetType.Is(true);
            li.CommonNetworkRelativeLink.NetNameOffset.Is(20u);
            li.CommonNetworkRelativeLink.DeviceNameOffset.Is(0u);
            li.CommonNetworkRelativeLink.NetworkProviderType.Value.Is(131072u);
            li.CommonNetworkRelativeLink.NetNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.DeviceNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.NetName.Is(@"\\192.168.10.101\SHARE");
            li.CommonNetworkRelativeLink.DeviceName.Is(@"temp\?");
            li.CommonNetworkRelativeLink.NetNameUnicode.IsNull();
            li.CommonNetworkRelativeLink.DeviceNameUnicode.IsNull();
            li.CommonPathSuffix.Is(@"temp\?");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.Is(@"temp\☺");

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@".\☺");
            result.StringData.WORKING_DIR.Is(null);
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "RemoteDirUnicode.json"));
        }
        [Fact]
        public void TestRemoteFile()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "RemoteFile.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(false);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(true);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(true);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(false);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(true);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-08-27T15:50:47.6096096+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-08-27T15:53:40.4196162+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-08-27T15:50:47.6096096+09:00").ToFileTime());
            slh.FileSize.Is(67u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            result.LinkTargetIDList.IsNull();

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(79u);
            li.LinkInfoHeaderSize.Is(28u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsFalse();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsTrue();
            li.VolumeIDOffset.Is(0u);
            li.LocalBasePathOffset.Is(0u);
            li.CommonNetworkRelativeLinkOffset.Is(28u);
            li.CommonPathSuffixOffset.Is(71u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(0u);
            li.VolumeID.IsNull();
            li.LocalBasePath.IsNull();
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkSize.Is(43u);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidDevice.Is(false);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidNetType.Is(true);
            li.CommonNetworkRelativeLink.NetNameOffset.Is(20u);
            li.CommonNetworkRelativeLink.DeviceNameOffset.Is(0u);
            li.CommonNetworkRelativeLink.NetworkProviderType.Value.Is(131072u);
            li.CommonNetworkRelativeLink.NetNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.DeviceNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.NetName.Is(@"\\192.168.10.101\SHARE");
            li.CommonNetworkRelativeLink.DeviceName.Is("memo.md");
            li.CommonNetworkRelativeLink.NetNameUnicode.IsNull();
            li.CommonNetworkRelativeLink.DeviceNameUnicode.IsNull();
            li.CommonPathSuffix.Is("memo.md");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.IsNull();

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@".\memo.md");
            result.StringData.WORKING_DIR.Is(@"\\192.168.10.101\Share");
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "RemoteFile.json"));
        }
        [Fact]
        public void TestRemoteFileUnicode()
        {
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "RemoteFileUnicode.lnk"));
            WindowsShellLinkEntity result = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            var slh = result.ShellLinkHeader;
            slh.HeaderSize.Is(76);
            slh.LinkCLSID.ToString().Is("00021401-0000-0000-c000-000000000046");
            slh.LinkFlags.HasLinkTargetIDList.Is(false);
            slh.LinkFlags.HasLinkInfo.Is(true);
            slh.LinkFlags.HasName.Is(false);
            slh.LinkFlags.HasRelativePath.Is(true);
            slh.LinkFlags.HasWorkingDir.Is(true);
            slh.LinkFlags.HasArguments.Is(false);
            slh.LinkFlags.HasIconLocation.Is(false);
            slh.LinkFlags.IsUnicode.Is(true);
            slh.LinkFlags.ForceNoLinkInfo.Is(false);
            slh.LinkFlags.HasExpString.Is(true);
            slh.LinkFlags.RunInSeparateProcess.Is(false);
            slh.LinkFlags.Unused1.Is(false);
            slh.LinkFlags.HasDarwinID.Is(false);
            slh.LinkFlags.RunAsUser.Is(false);
            slh.LinkFlags.HasExpIcon.Is(false);
            slh.LinkFlags.NoPidlAlias.Is(false);
            slh.LinkFlags.Unused2.Is(false);
            slh.LinkFlags.RunWithShimLayer.Is(false);
            slh.LinkFlags.ForceNoLinkTrack.Is(false);
            slh.LinkFlags.EnableTargetMetadata.Is(true);
            slh.LinkFlags.DisableLinkPathTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderTracking.Is(false);
            slh.LinkFlags.DisableKnownFolderAlias.Is(false);
            slh.LinkFlags.AllowLinkToLink.Is(false);
            slh.LinkFlags.UnaliasOnSave.Is(false);
            slh.LinkFlags.PreferEnvironmentPath.Is(false);
            slh.LinkFlags.KeepLocalIDListForUNCTarget.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_READONLY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_HIDDEN.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SYSTEM.Is(false);
            slh.FileAttributes.Reserved1.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_DIRECTORY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ARCHIVE.Is(true);
            slh.FileAttributes.Reserved2.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NORMAL.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_TEMPORARY.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_COMPRESSED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_OFFLINE.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED.Is(false);
            slh.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED.Is(false);
            slh.CreationTime.Is(DateTime.Parse("2021-09-18T11:17:21.1979489+09:00").ToFileTime());
            slh.AccessTime.Is(DateTime.Parse("2021-09-18T11:32:01.1609195+09:00").ToFileTime());
            slh.WriteTime.Is(DateTime.Parse("2021-09-18T11:19:34.9759550+09:00").ToFileTime());
            slh.FileSize.Is(1491u);
            slh.IconIndex.Is(0);
            slh.ShowCommand.Is(1u);
            Assert.Equal(0x00, slh.HotKey.LowByte);
            Assert.Equal(0x00, slh.HotKey.HighByte);
            slh.Reserved1.Length.Is(2);
            slh.Reserved2.Length.Is(4);
            slh.Reserved3.Length.Is(4);

            result.LinkTargetIDList.IsNull();

            var li = result.LinkInfo;
            li.LinkInfoSize.Is(118u);
            li.LinkInfoHeaderSize.Is(36u);
            li.LinkInfoFlags.VolumeIDAndLocalBasePath.IsFalse();
            li.LinkInfoFlags.CommonNetworkRelativeLinkAndPathSuffix.IsTrue();
            li.VolumeIDOffset.Is(0u);
            li.LocalBasePathOffset.Is(0u);
            li.CommonNetworkRelativeLinkOffset.Is(36u);
            li.CommonPathSuffixOffset.Is(79u);
            li.LocalBasePathOffsetUnicode.Is(0u);
            li.CommonPathSuffixOffsetUnicode.Is(92u);
            li.VolumeID.IsNull();
            li.LocalBasePath.IsNull();
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkSize.Is(43u);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidDevice.Is(false);
            li.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ValidNetType.Is(true);
            li.CommonNetworkRelativeLink.NetNameOffset.Is(20u);
            li.CommonNetworkRelativeLink.DeviceNameOffset.Is(0u);
            li.CommonNetworkRelativeLink.NetworkProviderType.Value.Is(131072u);
            li.CommonNetworkRelativeLink.NetNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.DeviceNameOffsetUnicode.Is(0u);
            li.CommonNetworkRelativeLink.NetName.Is(@"\\192.168.10.101\SHARE");
            li.CommonNetworkRelativeLink.DeviceName.Is(@"temp\?\?.txt");
            li.CommonNetworkRelativeLink.NetNameUnicode.IsNull();
            li.CommonNetworkRelativeLink.DeviceNameUnicode.IsNull();
            li.CommonPathSuffix.Is(@"temp\?\?.txt");
            li.LocalBasePathUnicode.IsNull();
            li.CommonPathSuffixUnicode.Is(@"temp\☺\☺.txt");

            result.StringData.NAME_STRING.Is(null);
            result.StringData.RELATIVE_PATH.Is(@".\☺.txt");
            result.StringData.WORKING_DIR.Is(@"\\192.168.10.101\Share\temp\☺");
            result.StringData.COMMAND_LINE_ARGUMENTS.Is(null);
            result.StringData.ICON_LOCATION.Is(null);

            AssertEqualByJson(result, Path.Combine("Resources", "RemoteFileUnicode.json"));
        }
        [Fact]
        public void TestSerialize()
        {
            // using var reader = new BinaryReader4Test(Path.Combine("Resources", "LocalFile.lnk"));
            // var obj2 = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            // using var ms = new MemoryStream();
            // new LnkBinarySerializer().Serialize(ms, obj2);

            // var actual = ms.ToArray();
            // var expected = File.ReadAllBytes(Path.Combine("Resources", "LocalFile.lnk"));
            // var expected2 = expected.Take(actual.Length).ToArray();
            // actual.Reverse().Is(expected2.Reverse());
            // actual.Is(expected);
        }
        [Fact]
        public void TestDeserialize()
        {
            var obj1 = WindowsShortcutParser.Parser.WindowsShortcutParser.FromJsonFile(Path.Combine("Resources", "LocalFile.json"));
            using var reader = new BinaryReader4Test(Path.Combine("Resources", "LocalFile.lnk"));
            var obj2 = WindowsShortcutParser.Parser.WindowsShortcutParser.Parse(reader);
            obj1.ShellLinkHeader.HeaderSize.Is(obj2.ShellLinkHeader.HeaderSize);
            obj1.ShellLinkHeader.LinkCLSID.Is(obj2.ShellLinkHeader.LinkCLSID);
            obj1.ShellLinkHeader.LinkFlags.HasLinkTargetIDList.Is(obj2.ShellLinkHeader.LinkFlags.HasLinkTargetIDList);
            obj1.ShellLinkHeader.LinkFlags.HasLinkInfo.Is(obj2.ShellLinkHeader.LinkFlags.HasLinkInfo);
            obj1.ShellLinkHeader.LinkFlags.HasName.Is(obj2.ShellLinkHeader.LinkFlags.HasName);
            obj1.ShellLinkHeader.LinkFlags.HasRelativePath.Is(obj2.ShellLinkHeader.LinkFlags.HasRelativePath);
            obj1.ShellLinkHeader.LinkFlags.HasWorkingDir.Is(obj2.ShellLinkHeader.LinkFlags.HasWorkingDir);
            obj1.ShellLinkHeader.LinkFlags.HasArguments.Is(obj2.ShellLinkHeader.LinkFlags.HasArguments);
            obj1.ShellLinkHeader.LinkFlags.HasIconLocation.Is(obj2.ShellLinkHeader.LinkFlags.HasIconLocation);
            obj1.ShellLinkHeader.LinkFlags.IsUnicode.Is(obj2.ShellLinkHeader.LinkFlags.IsUnicode);
            obj1.ShellLinkHeader.LinkFlags.ForceNoLinkInfo.Is(obj2.ShellLinkHeader.LinkFlags.ForceNoLinkInfo);
            obj1.ShellLinkHeader.LinkFlags.HasExpString.Is(obj2.ShellLinkHeader.LinkFlags.HasExpString);
            obj1.ShellLinkHeader.LinkFlags.RunInSeparateProcess.Is(obj2.ShellLinkHeader.LinkFlags.RunInSeparateProcess);
            obj1.ShellLinkHeader.LinkFlags.Unused1.Is(obj2.ShellLinkHeader.LinkFlags.Unused1);
            obj1.ShellLinkHeader.LinkFlags.HasDarwinID.Is(obj2.ShellLinkHeader.LinkFlags.HasDarwinID);
            obj1.ShellLinkHeader.LinkFlags.RunAsUser.Is(obj2.ShellLinkHeader.LinkFlags.RunAsUser);
            obj1.ShellLinkHeader.LinkFlags.HasExpIcon.Is(obj2.ShellLinkHeader.LinkFlags.HasExpIcon);
            obj1.ShellLinkHeader.LinkFlags.NoPidlAlias.Is(obj2.ShellLinkHeader.LinkFlags.NoPidlAlias);
            obj1.ShellLinkHeader.LinkFlags.Unused2.Is(obj2.ShellLinkHeader.LinkFlags.Unused2);
            obj1.ShellLinkHeader.LinkFlags.RunWithShimLayer.Is(obj2.ShellLinkHeader.LinkFlags.RunWithShimLayer);
            obj1.ShellLinkHeader.LinkFlags.ForceNoLinkTrack.Is(obj2.ShellLinkHeader.LinkFlags.ForceNoLinkTrack);
            obj1.ShellLinkHeader.LinkFlags.EnableTargetMetadata.Is(obj2.ShellLinkHeader.LinkFlags.EnableTargetMetadata);
            obj1.ShellLinkHeader.LinkFlags.DisableLinkPathTracking.Is(obj2.ShellLinkHeader.LinkFlags.DisableLinkPathTracking);
            obj1.ShellLinkHeader.LinkFlags.DisableKnownFolderTracking.Is(obj2.ShellLinkHeader.LinkFlags.DisableKnownFolderTracking);
            obj1.ShellLinkHeader.LinkFlags.DisableKnownFolderAlias.Is(obj2.ShellLinkHeader.LinkFlags.DisableKnownFolderAlias);
            obj1.ShellLinkHeader.LinkFlags.AllowLinkToLink.Is(obj2.ShellLinkHeader.LinkFlags.AllowLinkToLink);
            obj1.ShellLinkHeader.LinkFlags.UnaliasOnSave.Is(obj2.ShellLinkHeader.LinkFlags.UnaliasOnSave);
            obj1.ShellLinkHeader.LinkFlags.PreferEnvironmentPath.Is(obj2.ShellLinkHeader.LinkFlags.PreferEnvironmentPath);
            obj1.ShellLinkHeader.LinkFlags.KeepLocalIDListForUNCTarget.Is(obj2.ShellLinkHeader.LinkFlags.KeepLocalIDListForUNCTarget);
            obj1.ShellLinkHeader.LinkFlags.Is(obj2.ShellLinkHeader.LinkFlags);
            // obj1.ShellLinkHeader.FileAttributes.Is(obj2.ShellLinkHeader.FileAttributes);
            obj1.ShellLinkHeader.CreationTime.Is(obj2.ShellLinkHeader.CreationTime);
            obj1.ShellLinkHeader.AccessTime.Is(obj2.ShellLinkHeader.AccessTime);
            obj1.ShellLinkHeader.WriteTime.Is(obj2.ShellLinkHeader.WriteTime);
            obj1.ShellLinkHeader.FileSize.Is(obj2.ShellLinkHeader.FileSize);
            obj1.ShellLinkHeader.IconIndex.Is(obj2.ShellLinkHeader.IconIndex);
            obj1.ShellLinkHeader.ShowCommand.Is(obj2.ShellLinkHeader.ShowCommand);
            // obj1.ShellLinkHeader.HotKey.Is(obj2.ShellLinkHeader.HotKey);
            obj1.ShellLinkHeader.Reserved1.Is(obj2.ShellLinkHeader.Reserved1);
            obj1.ShellLinkHeader.Reserved2.Is(obj2.ShellLinkHeader.Reserved2);
            obj1.ShellLinkHeader.Reserved3.Is(obj2.ShellLinkHeader.Reserved3);
            // obj1.ShellLinkHeader.Is(obj2.ShellLinkHeader);
            // obj1.LinkTargetIDList.Is(obj2.LinkTargetIDList);
            // obj1.LinkInfo.Is(obj2.LinkInfo);
            // obj1.StringData.Is(obj2.StringData);
        }
        private static void AssertEqualByJson(WindowsShellLinkEntity entity, string expectedFilepath)
        {
            var jsonStringExpected = File.ReadAllText(expectedFilepath);
            entity.ToJsonString().Is(jsonStringExpected.Trim());
        }
    }
}
